# -*- coding: utf-8 -*-
"""SourceCodeTubesSA-Rezi

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uIBw-fxl64bbWf_b30UdjALCTiilLD5R

# **600 data array** n
"""

n = [49, 487, 98, 230, 427, 211, 290, 190, 195, 478, #600 angka random pada array,yang diambil menggunakan library random
     22, 369, 527, 258, 467, 244, 329, 578, 377, 310,
     552, 118, 288, 111, 17, 171, 129, 475, 181, 515,
     364, 279, 81, 94, 22, 73, 509, 158, 528, 239, 565,
     194, 314, 162, 207, 167, 592, 589, 480, 176, 17, 80,
     122, 178, 173, 477, 412, 106, 102, 513, 12, 472, 284,
     208, 80, 435, 402, 476, 549, 2, 59, 514, 560, 175, 259
     , 424, 407, 75, 152, 565, 561, 370, 96, 483, 480, 44, 256,
     80, 575, 71, 441, 106, 410, 442, 596, 470, 244, 586, 581,
     12, 94, 404, 338, 338, 102, 495, 554, 283, 404, 26, 29, 263,
     196, 353, 120, 511, 202, 306, 185, 281, 292, 30, 322, 463, 77,
     190, 327, 90, 504, 177, 140, 93, 534, 460, 250, 166, 291, 105,
     242, 556, 71, 516, 446, 89, 357, 27, 430, 1, 42, 87, 449, 245,
     450, 361, 7, 186, 150, 393, 167, 248, 266, 110, 598, 104, 225,
     444, 28, 384, 487, 534, 446, 189, 132, 280, 418, 472, 98, 104,
     185, 89, 160, 68, 199, 12, 572, 381, 312, 178, 470, 271, 1, 42,
     135, 220, 322, 517, 313, 417, 419, 575, 355, 485, 398, 432, 5,
     129, 516, 162, 217, 566, 106, 127, 410, 67, 239, 145, 166, 582,
     235, 529, 143, 156, 35, 128, 589, 512, 129, 394, 381, 144, 386,
     190, 591, 43, 1, 20, 84, 87, 22, 164, 61, 544, 174, 98, 128, 298,
     503, 406, 401, 126, 248, 10, 510, 519, 556, 420, 495, 245, 161, 324,
     369, 199, 248, 95, 316, 280, 368, 195, 430, 172, 92, 307, 548, 398,
     382, 89, 521, 415, 170, 477, 67, 130, 127, 267, 595, 21, 230, 223,
     451, 130, 8, 411, 187, 15, 543, 371, 549, 224, 233, 518, 186, 518, 
     99, 267, 292, 425, 451, 107, 3, 415, 64, 169, 121, 571, 443, 184, 
     350, 276, 10, 411, 599, 498, 369, 223, 482, 536, 261, 287, 203,
     499, 98, 129, 437, 491, 49, 117, 428, 114, 390, 41, 164, 49, 488,
     90, 545, 145, 106, 170, 403, 454, 391, 571, 320, 443, 497, 125, 380,
     15, 212, 85, 240, 572, 469, 60, 515, 189, 207, 483, 132, 184, 126, 
     354, 429, 17, 591, 75, 47, 558, 188, 312, 376, 196, 281, 258, 127,
     572, 59, 273, 351, 16, 209, 520, 361, 63, 391, 496, 21, 446, 530, 
     276, 201, 460, 582, 206, 566, 156, 539, 415, 396, 24, 77, 358, 468,
     487, 194, 221, 444, 538, 314, 422, 586, 137, 65, 189, 351, 301, 554, 
     241, 140, 386, 103, 377, 368, 13, 336, 114, 44, 499, 33, 400, 115, 
     449, 471, 178, 301, 131, 196, 288, 543, 233, 413, 232, 253, 230, 0, 
     257, 7, 588, 329, 450, 250, 277, 243, 531, 459, 137, 76, 144, 288,
     36, 528, 545, 484, 205, 92, 248, 355, 401, 5, 28, 146, 282, 597,
     526, 530, 77, 7, 201, 329, 37, 248, 235, 454, 236, 99, 349, 576, 514, 11, 71]

"""# **800 data array** x"""

x=[138,58, 66, 2, 65, 3, 88, 2, 30, 78, 58, 58, 10, 28, 45, 40, 29, 49, 2, 2, 39, 34, 52, 75, 73, 61, 37, 10, 88, 69, 68, 6, 11, 24, 99, 17, 64, 12, 98, 50, 47, 19, 48, 57, 13, 89, 34, 5, 91, 77, 11, 6, 99, 64, 65, 14, 63, 8, 14, 20, 41, 67, 42, 15, 7, 75, 47, 86, 95, 100, 29, 28, 98, 88, 76, 70, 31, 21, 7, 42, 57, 34, 44, 9, 11, 68, 53, 54, 59, 37, 9, 60, 12, 34, 86, 67, 12, 59, 100, 57, 15, 330, 421, 275, 403, 363, 144, 194, 5, 330, 488, 291, 511, 231, 531, 90, 181, 178, 435, 677, 291, 415, 494, 297, 412, 662, 404, 611, 543, 655, 95, 614, 587, 216, 121, 87, 466, 619, 198, 371, 311, 522, 36, 520, 287, 190, 587, 383, 494, 553, 273, 607, 28, 572, 693, 288, 176, 439, 496, 589, 253, 43, 700, 466, 185, 651, 496, 668, 54, 582, 466, 696, 317, 77, 287, 543, 14, 128, 84, 534, 389, 138, 3, 633, 555, 623, 176, 268, 145, 578, 76, 32, 403, 593, 629, 133, 659, 444, 188, 537, 207, 103, 506, 249, 590, 680, 128, 252, 574, 26, 129, 302, 44, 144, 607, 529, 473, 114, 30, 483, 328, 656, 458, 179, 383, 379, 40, 675, 489, 376, 23, 118, 577, 510, 326, 29, 115, 69, 236, 677, 12, 561, 311, 434, 495, 479, 591, 571, 519, 302, 241, 93, 429, 215, 678, 69, 282, 65, 23, 374, 634, 106, 273, 604, 72, 565, 447, 528, 624, 597, 84, 366, 378, 91, 226, 149, 669, 3, 99, 53, 472, 576, 133, 414, 510, 232, 126, 275, 92, 215, 541, 250, 690, 673, 319, 294, 513, 481, 219, 351, 699, 480, 257, 278, 55, 683, 605, 632, 64, 399, 164, 476, 556, 198, 461, 23, 589, 199, 283, 239, 45, 71, 54, 326, 18, 667, 690, 354, 491, 388, 24, 642, 36, 321, 575, 599, 498, 375, 592, 349, 308, 687, 393, 18, 689, 256, 388, 400, 478, 574, 568, 66, 524, 365, 102, 164, 513, 359, 411, 497, 297, 510, 115, 211, 131, 503, 38, 194, 218, 12, 526, 170, 167, 693, 575, 661, 255, 503, 416, 207, 615, 659, 613, 304, 408, 107, 655, 436, 155, 157, 163, 85, 218, 67, 265, 232, 307, 638, 252, 414, 432, 416, 618, 609, 281, 78, 542, 200, 53, 569, 483, 597, 528, 541, 349, 384, 250, 322, 168, 700, 548, 369, 664, 37, 309, 601, 128, 491, 699, 448, 123, 651, 150, 80, 213, 383, 573, 441, 332, 616, 631, 26, 482, 669, 90, 169, 444, 253, 448, 398, 200, 279, 567, 407, 145, 575, 264, 223, 441, 589, 101, 588, 212, 244, 526, 167, 190, 384, 66, 556, 307, 555, 201, 699, 519, 372, 37, 230, 558, 694, 110, 480, 496, 281, 313, 512, 648, 308, 355, 594, 512, 27, 339, 134, 78, 501, 528, 611, 631, 548, 526, 270, 268, 12, 223, 207, 76, 591, 157, 421, 205, 68, 307, 239, 17, 247, 20, 508, 218, 118, 513, 154, 412, 162, 44, 569, 337, 363, 696, 416, 388, 416, 461, 226, 98, 498, 113, 172, 12, 494, 112, 511, 295, 233, 567, 287, 565, 65, 606, 600, 532, 63, 283, 350, 235, 89, 489, 40, 57, 285, 99, 268, 433, 177, 243, 451, 474, 660, 257, 264, 445, 169, 478, 658, 318, 359, 309, 663, 559, 5, 355, 155, 243, 690, 635, 585, 377, 208, 291, 122, 373, 264, 598, 426, 6, 187, 672, 278, 175, 506, 670, 571, 92, 87, 171, 486, 424, 198, 484, 31, 309, 402, 205, 457, 15, 696, 19, 618, 11, 672, 526, 192, 408, 252, 576, 6, 475, 687, 426, 277, 116, 609, 132, 131, 353, 96, 97, 639, 251, 14, 185, 448, 402, 411, 603, 428, 67, 329, 461, 122, 370, 470, 84, 262, 270, 396, 604, 497, 327, 166, 261, 145, 380, 589, 671, 608, 446, 430, 251, 616, 539, 238, 366, 379, 192, 631, 469, 433, 606, 639, 431, 204, 349, 315, 341, 168, 114, 321, 512, 692, 388, 666, 28, 514, 432, 427, 683, 280, 544, 110, 201, 425, 223, 176, 370, 695, 418, 579, 207, 249, 39, 265, 671, 138, 279, 560, 641, 463, 319, 248, 17, 487, 152, 519, 495, 397, 124, 205, 677, 397, 609, 100, 600, 397, 364, 624, 244, 580, 482, 254, 342, 405, 567, 322, 132, 273, 233, 125, 131, 297, 413, 286, 83, 364, 641, 113, 662, 382, 104, 29, 62, 227, 63, 163, 388, 648, 204, 282, 452, 656, 253, 479, 365, 637, 485, 651, 388, 365, 380, 486, 4, 574, 88, 346, 71, 29, 406, 58, 489, 135, 378, 57, 636, 314, 279, 592, 687, 652, 681, 603]

"""# **1000 data array** y"""

y=[964, 833, 317, 787, 43, 25, 784, 967, 264, 736, 809, 618, 397, 545, 805, 391, 950, 594, 27, 274, 13, 747, 864, 552, 543, 842, 616, 116, 368, 759, 716, 297, 956, 739, 370, 495, 327, 419, 302, 269, 241, 529, 780, 645, 236, 908, 918, 170, 872, 711, 511, 79, 823, 358, 598, 442, 824, 645, 655, 303, 308, 246, 156, 271, 102, 245, 758, 699, 358, 140, 377, 487, 233, 891, 809, 496, 647, 221, 220, 893, 652, 326, 588, 282, 999, 390, 407, 378, 316, 475, 686, 850, 348, 554, 458, 533, 51, 913, 103, 74, 46, 874, 332, 125, 720, 814, 727, 983, 767, 304, 766, 802, 731, 434, 346, 587, 403, 501, 168, 227, 131, 446, 982, 64, 338, 449, 575, 897, 380, 696, 887, 936, 15, 468, 653, 948, 587, 524, 1000, 463, 883, 428, 720, 352, 124, 839, 117, 522, 140, 956, 109, 294, 531, 147, 961, 756, 535, 377, 98, 363, 79, 266, 522, 509, 621, 104, 371, 693, 832, 108, 968, 69, 983, 527, 11, 505, 506, 573, 59, 508, 687, 901, 573, 0, 808, 985, 805, 249, 409, 392, 716, 163, 69, 932, 26, 46, 327, 708, 890, 234, 477, 865, 432, 133, 10, 177, 447, 807, 836, 717, 594, 83, 9, 685, 101, 943, 331, 41, 566, 911, 1, 219, 330, 101, 648, 544, 167, 378, 504, 157, 813, 39, 468, 821, 885, 958, 185, 415, 121, 339, 820, 123, 449, 636, 964, 26, 969, 10, 66, 830, 680, 545, 270, 551, 790, 730, 251, 503, 930, 120, 684, 201, 983, 987, 568, 244, 865, 58, 1, 79, 559, 895, 51, 845, 640, 859, 782, 807, 895, 421, 24, 142, 502, 183, 169, 188, 328, 26, 787, 707, 308, 621, 111, 561, 296, 759, 764, 192, 607, 45, 543, 508, 704, 607, 70, 359, 914, 562, 161, 483, 134, 919, 138, 64, 249, 568, 478, 923, 494, 714, 544, 725, 356, 145, 98, 968, 983, 712, 901, 589, 345, 321, 344, 555, 782, 978, 489, 728, 221, 301, 458, 419, 84, 169, 244, 362, 323, 695, 570, 21, 655, 479, 407, 754, 394, 303, 484, 288, 202, 293, 688, 649, 167, 383, 963, 689, 18, 340, 392, 490, 170, 975, 476, 504, 750, 160, 941, 629, 692, 828, 954, 243, 32, 304, 918, 132, 908, 96, 655, 516, 691, 964, 236, 684, 942, 528, 748, 361, 411, 802, 46, 121, 46, 458, 501, 780, 48, 797, 761, 614, 39, 788, 506, 560, 710, 263, 573, 39, 710, 65, 22, 671, 55, 378, 208, 818, 548, 935, 418, 147, 234, 855, 114, 166, 882, 184, 148, 547, 190, 842, 301, 49, 115, 771, 265, 702, 23, 788, 550, 493, 138, 519, 978, 584, 812, 670, 282, 123, 711, 92, 306, 244, 527, 52, 268, 610, 759, 419, 1000, 779, 170, 895, 132, 76, 619, 193, 786, 606, 522, 191, 337, 757, 936, 93, 847, 946, 794, 672, 119, 947, 70, 550, 610, 350, 484, 854, 86, 276, 628, 162, 970, 756, 606, 644, 754, 82, 670, 44, 776, 956, 153, 421, 884, 631, 194, 437, 991, 267, 798, 714, 295, 119, 871, 481, 319, 535, 333, 60, 970, 214, 934, 258, 937, 926, 348, 778, 51, 471, 283, 142, 56, 754, 649, 555, 463, 318, 162, 595, 503, 342, 292, 767, 160, 183, 928, 183, 589, 383, 226, 786, 439, 714, 271, 708, 897, 877, 416, 629, 844, 617, 624, 817, 106, 494, 438, 734, 105, 593, 135, 786, 497, 818, 87, 286, 373, 194, 781, 374, 130, 828, 610, 857, 859, 179, 700, 589, 120, 907, 934, 626, 132, 126, 189, 193, 879, 136, 27, 40, 102, 878, 217, 810, 919, 489, 567, 180, 573, 275, 39, 743, 775, 962, 928, 957, 362, 862, 520, 112, 999, 65, 837, 137, 446, 81, 305, 646, 44, 16, 664, 53, 803, 92, 689, 174, 252, 389, 141, 214, 554, 422, 928, 535, 942, 657, 140, 891, 362, 687, 599, 217, 280, 465, 749, 386, 735, 562, 864, 713, 994, 710, 57, 826, 771, 646, 782, 575, 406, 979, 762, 895, 713, 463, 241, 288, 137, 533, 993, 28, 967, 812, 934, 546, 359, 698, 775, 446, 299, 416, 155, 909, 821, 214, 204, 226, 800, 757, 402, 801, 242, 604, 245, 56, 301, 749, 717, 65, 593, 808, 351, 562, 210, 174, 718, 928, 942, 629, 727, 140, 477, 821, 866, 365, 122, 875, 416, 66, 624, 210, 891, 899, 212, 907, 767, 204, 813, 510, 761, 763, 450, 309, 71, 488, 23, 372, 198, 76, 378, 548, 260, 786, 64, 680, 535, 163, 384, 200, 166, 346, 93, 487, 639, 669, 550, 739, 641, 436, 300, 600, 284, 264, 840, 686, 873, 964, 510, 663, 101, 761, 846, 122, 961, 288, 386, 576, 846, 481, 292, 64, 471, 977, 338, 885, 920, 781, 995, 7, 99, 308, 144, 261, 228, 25, 803, 625, 752, 747, 264, 121, 436, 573, 541, 724, 568, 692, 430, 599, 486, 865, 707, 261, 469, 87, 295, 781, 561, 586, 21, 585, 148, 384, 468, 589, 618, 804, 23, 300, 693, 64, 566, 526, 30, 580, 986, 166, 301, 347, 269, 51, 907, 838, 803, 665, 47, 444, 950, 401, 635, 884, 316, 903, 769, 213, 680, 39, 436, 814, 937, 338, 260, 360, 299, 994, 522, 47, 965, 507, 22, 44, 432, 40, 868, 492, 254, 827, 621, 483, 89, 264, 142, 368, 66, 400, 241, 139, 981, 534, 354, 879, 890, 587, 154, 881, 575, 1, 462, 66, 24, 66, 615, 921, 967, 588, 92, 87, 956, 664, 40, 182, 690, 90, 19, 873, 126, 829, 621, 800, 466, 244, 900, 254, 886, 184, 405, 413, 192, 280, 526, 972, 996, 958, 447, 11, 166, 618, 433, 309, 390, 910, 501, 676, 848, 455, 919, 632, 686, 344, 12, 442, 317, 546, 160, 893, 626, 278, 696, 598, 612, 835, 866, 386, 378, 184, 157, 734, 455, 345, 137, 611, 267, 661, 214, 327, 820, 939, 710, 487, 224, 814, 700, 403]

"""# **Insertion Sort**"""

# Insertion sort in Python


def insertionSort(array):

    for step in range(1, len(array)):
        key = array[step]
        j = step - 1
        
        # Bandingkan kunci dengan setiap elemen di sebelah kirinya hingga ditemukan elemen yang lebih kecil darinya
         # Untuk urutan menurun, ubah key<array[j] menjadi key>array[j].      
        while j >= 0 and key < array[j]:
            array[j + 1] = array[j]
            j = j - 1
        
        # Place key at after the element just smaller than it.
        array[j + 1] = key

insertionSort(n)
print(n)

# Insertion sort in Python


def insertionSort(array):

    for step in range(1, len(array)):
        key = array[step]
        j = step - 1
        
        # Bandingkan kunci dengan setiap elemen di sebelah kirinya hingga ditemukan elemen yang lebih kecil darinya
         # Untuk urutan menurun, ubah key<array[j] menjadi key>array[j].      
        while j >= 0 and key < array[j]:
            array[j + 1] = array[j]
            j = j - 1
        
        # Place key at after the element just smaller than it.
        array[j + 1] = key

insertionSort(x)
print(x)

# Insertion sort in Python


def insertionSort(array):

    for step in range(1, len(array)):
        key = array[step]
        j = step - 1
        
        # Bandingkan kunci dengan setiap elemen di sebelah kirinya hingga ditemukan elemen yang lebih kecil darinya
         # Untuk urutan menurun, ubah key<array[j] menjadi key>array[j].      
        while j >= 0 and key < array[j]:
            array[j + 1] = array[j]
            j = j - 1
        
        # Place key at after the element just smaller than it.
        array[j + 1] = key

insertionSort(y)
print(y)

"""# **Sequential Search**"""

def OrderedSeqSearch(data,key):
  i=0
  stop=False
  found=[]
  while not stop and i<len(data):
    if data[i] == key:
      found.append(i)
    elif data[i] > key:
      stop = True
    i += 1
  if found!=[]:
    return f"angka {key} terdapat pada index : {found}"
  else:
    return f"angka {key} tidak ditemukan"

"""# **Analisis Sequential Search**

Cari angka yang terdapat pada array N
"""

print(OrderedSeqSearch(n,588))
import timeit

start = timeit.default_timer() # catat waktu mulai
sum = 0
n = 1000000
for i in range(n+1):
  sum+=i;
stop = timeit.default_timer() # catat waktu selesai
lama_eksekusi = stop - start # lama eksekusi dalam satuan detik
print("Lama eksekusi: ",lama_eksekusi,"detik")

"""Cari angka yang terdapat pada array X

---


"""

print(OrderedSeqSearch(x,677))
start = timeit.default_timer() # catat waktu mulai
sum = 0
n = 1000000
for i in range(n+1):
  sum+=i;
stop = timeit.default_timer() # catat waktu selesai
lama_eksekusi = stop - start # lama eksekusi dalam satuan detik
print("Lama eksekusi: ",lama_eksekusi,"detik")

"""Searching pada array Y"""

print(OrderedSeqSearch(y,490))
start = timeit.default_timer() # catat waktu mulai
sum = 0
n = 1000000
for i in range(n+1):
  sum+=i;
stop = timeit.default_timer() # catat waktu selesai
lama_eksekusi = stop - start # lama eksekusi dalam satuan detik
print("Lama eksekusi: ",lama_eksekusi,"detik")

"""# **Analisis Binary Search**

**Pencarian Pada Array x**
"""

def binary_search(arr, x):
	low = 0
	high = len(arr) - 1
	mid = 0

	while low <= high:

		mid = (high + low) // 2

		# If x is greater, ignore left half
		if arr[mid] < x:
			low = mid + 1

		# If x is smaller, ignore right half
		elif arr[mid] > x:
			high = mid - 1

		# means x is present at mid
		else:
			return mid

	# If we reach here, then the element was not present
	return -1


# Test array
arr = [2, 2, 2, 2, 3, 3, 3, 4, 5, 5, 5, 6, 6, 6, 6, 7, 7, 8, 9, 9, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 13, 14, 14, 14, 14, 15, 15, 15, 17, 17, 17, 18, 18, 19, 19, 20, 20, 21, 23, 23, 23, 24, 24, 26, 26, 27, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 30, 31, 31, 32, 34, 34, 34, 34, 36, 36, 37, 37, 37, 37, 38, 39, 39, 40, 40, 40, 41, 42, 42, 43, 44, 44, 44, 45, 45, 47, 47, 48, 49, 50, 52, 53, 53, 53, 54, 54, 54, 55, 57, 57, 57, 57, 57, 58, 58, 58, 58, 59, 59, 60, 61, 62, 63, 63, 63, 64, 64, 64, 65, 65, 65, 65, 66, 66, 66, 67, 67, 67, 67, 68, 68, 68, 69, 69, 69, 70, 71, 71, 72, 73, 75, 75, 76, 76, 76, 77, 77, 78, 78, 78, 80, 83, 84, 84, 84, 85, 86, 86, 87, 87, 88, 88, 88, 88, 89, 89, 90, 90, 91, 91, 92, 92, 93, 95, 95, 96, 97, 98, 98, 98, 99, 99, 99, 99, 100, 100, 100, 101, 102, 103, 104, 106, 107, 110, 110, 112, 113, 113, 114, 114, 115, 115, 116, 118, 118, 121, 122, 122, 123, 124, 125, 126, 128, 128, 128, 129, 131, 131, 131, 132, 132, 133, 133, 134, 135, 138, 138, 138, 144, 144, 145, 145, 145, 149, 150, 152, 154, 155, 155, 157, 157, 162, 163, 163, 164, 164, 166, 167, 167, 168, 168, 169, 169, 170, 171, 172, 175, 176, 176, 176, 177, 178, 179, 181, 185, 185, 187, 188, 190, 190, 192, 192, 194, 194, 198, 198, 198, 199, 200, 200, 201, 201, 204, 204, 205, 205, 205, 207, 207, 207, 207, 208, 211, 212, 213, 215, 215, 216, 218, 218, 218, 219, 223, 223, 223, 226, 226, 227, 230, 231, 232, 232, 233, 233, 235, 236, 238, 239, 239, 241, 243, 243, 244, 244, 247, 248, 249, 249, 250, 250, 251, 251, 252, 252, 252, 253, 253, 253, 254, 255, 256, 257, 257, 261, 262, 264, 264, 264, 265, 265, 268, 268, 268, 270, 270, 273, 273, 273, 275, 275, 277, 278, 278, 279, 279, 279, 280, 281, 281, 282, 282, 283, 283, 285, 286, 287, 287, 287, 288, 291, 291, 291, 294, 295, 297, 297, 297, 302, 302, 304, 307, 307, 307, 308, 308, 309, 309, 309, 311, 311, 313, 314, 315, 317, 318, 319, 319, 321, 321, 322, 322, 326, 326, 327, 328, 329, 330, 330, 332, 337, 339, 341, 342, 346, 349, 349, 349, 350, 351, 353, 354, 355, 355, 359, 359, 363, 363, 364, 364, 365, 365, 365, 366, 366, 369, 370, 370, 371, 372, 373, 374, 375, 376, 377, 378, 378, 379, 379, 380, 380, 382, 383, 383, 383, 384, 384, 388, 388, 388, 388, 388, 388, 389, 393, 396, 397, 397, 397, 398, 399, 400, 402, 402, 403, 403, 404, 405, 406, 407, 408, 408, 411, 411, 412, 412, 413, 414, 414, 415, 416, 416, 416, 416, 418, 421, 421, 424, 425, 426, 426, 427, 428, 429, 430, 431, 432, 432, 433, 433, 434, 435, 436, 439, 441, 441, 444, 444, 445, 446, 447, 448, 448, 448, 451, 452, 457, 458, 461, 461, 461, 463, 466, 466, 466, 469, 470, 472, 473, 474, 475, 476, 478, 478, 479, 479, 480, 480, 481, 482, 482, 483, 483, 484, 485, 486, 486, 487, 488, 489, 489, 489, 491, 491, 494, 494, 494, 495, 495, 496, 496, 496, 497, 497, 498, 498, 501, 503, 503, 506, 506, 508, 510, 510, 510, 511, 511, 512, 512, 512, 513, 513, 513, 514, 519, 519, 519, 520, 522, 524, 526, 526, 526, 526, 528, 528, 528, 529, 531, 532, 534, 537, 539, 541, 541, 542, 543, 543, 544, 548, 548, 553, 555, 555, 556, 556, 558, 559, 560, 561, 565, 565, 567, 567, 567, 568, 569, 569, 571, 571, 572, 573, 574, 574, 574, 575, 575, 575, 576, 576, 577, 578, 579, 580, 582, 585, 587, 587, 588, 589, 589, 589, 589, 590, 591, 591, 592, 592, 593, 594, 597, 597, 598, 599, 600, 600, 601, 603, 603, 604, 604, 605, 606, 606, 607, 607, 608, 609, 609, 609, 611, 611, 613, 614, 615, 616, 616, 618, 618, 619, 623, 624, 624, 629, 631, 631, 631, 632, 633, 634, 635, 636, 637, 638, 639, 639, 641, 641, 642, 648, 648, 651, 651, 651, 652, 655, 655, 656, 656, 658, 659, 659, 660, 661, 662, 662, 663, 664, 666, 667, 668, 669, 669, 670, 671, 671, 672, 672, 673, 675, 677, 677, 677, 678, 680, 681, 683, 683, 687, 687, 687, 689, 690, 690, 690, 692, 693, 693, 694, 695, 696, 696, 696, 699, 699, 699, 700, 700]
x = 677

# Function call
result = binary_search(arr, x)
print("Terdapat pada Index: ",result)
 

import timeit

start = timeit.default_timer() # catat waktu mulai
sum = 0
n = 1000000
for i in range(n+1):
  sum+=i;
stop = timeit.default_timer() # catat waktu selesai
lama_eksekusi = stop - start # lama eksekusi dalam satuan detik
print("Lama eksekusi: ",lama_eksekusi,"detik")

"""Pencarian pada array **Y**"""

def binary_search(arr, x):
	low = 0
	high = len(arr) - 1
	mid = 0

	while low <= high:

		mid = (high + low) // 2

		# If x is greater, ignore left half
		if arr[mid] < x:
			low = mid + 1

		# If x is smaller, ignore right half
		elif arr[mid] > x:
			high = mid - 1

		# means x is present at mid
		else:
			return mid

	# If we reach here, then the element was not present
	return -1


# Test array
arr =[0, 1, 1, 1, 7, 9, 10, 10, 11, 11, 12, 13, 15, 16, 18, 19, 21, 21, 22, 22, 23, 23, 23, 24, 24, 25, 25, 26, 26, 26, 27, 27, 28, 30, 32, 39, 39, 39, 39, 39, 40, 40, 40, 41, 43, 44, 44, 44, 45, 46, 46, 46, 46, 47, 47, 48, 49, 51, 51, 51, 51, 52, 53, 55, 56, 56, 57, 58, 59, 60, 64, 64, 64, 64, 64, 65, 65, 65, 66, 66, 66, 66, 66, 69, 69, 70, 70, 71, 74, 76, 76, 79, 79, 79, 81, 82, 83, 84, 86, 87, 87, 87, 89, 90, 92, 92, 92, 93, 93, 96, 98, 98, 99, 101, 101, 101, 102, 102, 103, 104, 105, 106, 108, 109, 111, 112, 114, 115, 116, 117, 119, 119, 120, 120, 121, 121, 121, 122, 122, 123, 123, 124, 125, 126, 126, 130, 131, 132, 132, 132, 133, 134, 135, 136, 137, 137, 137, 138, 138, 139, 140, 140, 140, 140, 141, 142, 142, 142, 144, 145, 147, 147, 148, 148, 153, 154, 155, 156, 157, 157, 160, 160, 160, 161, 162, 162, 163, 163, 166, 166, 166, 166, 167, 167, 168, 169, 169, 170, 170, 170, 174, 174, 177, 179, 180, 182, 183, 183, 183, 184, 184, 184, 185, 188, 189, 190, 191, 192, 192, 193, 193, 194, 194, 198, 200, 201, 202, 204, 204, 208, 210, 210, 212, 213, 214, 214, 214, 214, 217, 217, 219, 220, 221, 221, 224, 226, 226, 227, 228, 233, 234, 234, 236, 236, 241, 241, 241, 242, 243, 244, 244, 244, 244, 245, 245, 246, 249, 249, 251, 252, 254, 254, 258, 260, 260, 261, 261, 263, 264, 264, 264, 264, 265, 266, 267, 267, 268, 269, 269, 270, 271, 271, 274, 275, 276, 278, 280, 280, 282, 282, 283, 284, 286, 288, 288, 288, 292, 292, 293, 294, 295, 295, 296, 297, 299, 299, 300, 300, 301, 301, 301, 301, 302, 303, 303, 304, 304, 305, 306, 308, 308, 308, 309, 309, 316, 316, 317, 317, 318, 319, 321, 323, 326, 327, 327, 327, 328, 330, 331, 332, 333, 337, 338, 338, 338, 339, 340, 342, 344, 344, 345, 345, 346, 346, 347, 348, 348, 350, 351, 352, 354, 356, 358, 358, 359, 359, 360, 361, 362, 362, 362, 363, 365, 368, 368, 370, 371, 372, 373, 374, 377, 377, 378, 378, 378, 378, 378, 380, 383, 383, 384, 384, 386, 386, 386, 389, 390, 390, 391, 392, 392, 394, 397, 400, 401, 402, 403, 403, 405, 406, 407, 407, 409, 411, 413, 415, 416, 416, 416, 418, 419, 419, 419, 421, 421, 422, 428, 430, 432, 432, 433, 434, 436, 436, 436, 437, 438, 439, 442, 442, 444, 446, 446, 446, 447, 447, 449, 449, 450, 455, 455, 458, 458, 458, 462, 463, 463, 463, 465, 466, 468, 468, 468, 469, 471, 471, 475, 476, 477, 477, 478, 479, 481, 481, 483, 483, 484, 484, 486, 487, 487, 487, 488, 489, 489, 490, 492, 493, 494, 494, 495, 496, 497, 501, 501, 501, 502, 503, 503, 504, 504, 505, 506, 506, 507, 508, 508, 509, 510, 510, 511, 516, 519, 520, 522, 522, 522, 522, 524, 526, 526, 527, 527, 528, 529, 531, 533, 533, 534, 535, 535, 535, 535, 541, 543, 543, 544, 544, 545, 545, 546, 546, 547, 548, 548, 550, 550, 550, 551, 552, 554, 554, 555, 555, 559, 560, 561, 561, 562, 562, 562, 566, 566, 567, 568, 568, 568, 570, 573, 573, 573, 573, 573, 575, 575, 575, 576, 580, 584, 585, 586, 587, 587, 587, 588, 588, 589, 589, 589, 589, 593, 593, 594, 594, 595, 598, 598, 599, 599, 600, 604, 606, 606, 607, 607, 610, 610, 610, 611, 612, 614, 615, 616, 617, 618, 618, 618, 619, 621, 621, 621, 621, 624, 624, 625, 626, 626, 628, 629, 629, 629, 631, 632, 635, 636, 639, 640, 641, 644, 645, 645, 646, 646, 647, 648, 649, 649, 652, 653, 655, 655, 655, 657, 661, 663, 664, 664, 665, 669, 670, 670, 671, 672, 676, 680, 680, 680, 684, 684, 685, 686, 686, 686, 687, 687, 688, 689, 689, 690, 691, 692, 692, 693, 693, 695, 696, 696, 698, 699, 700, 700, 702, 704, 707, 707, 708, 708, 710, 710, 710, 710, 711, 711, 712, 713, 713, 714, 714, 714, 716, 716, 717, 717, 718, 720, 720, 724, 725, 727, 727, 728, 730, 731, 734, 734, 735, 736, 739, 739, 743, 747, 747, 748, 749, 749, 750, 752, 754, 754, 754, 756, 756, 757, 757, 758, 759, 759, 759, 761, 761, 761, 762, 763, 764, 766, 767, 767, 767, 769, 771, 771, 775, 775, 776, 778, 779, 780, 780, 781, 781, 781, 782, 782, 782, 784, 786, 786, 786, 786, 787, 787, 788, 788, 790, 794, 797, 798, 800, 800, 801, 802, 802, 803, 803, 803, 804, 805, 805, 807, 807, 808, 808, 809, 809, 810, 812, 812, 813, 813, 814, 814, 814, 817, 818, 818, 820, 820, 821, 821, 821, 823, 824, 826, 827, 828, 828, 829, 830, 832, 833, 835, 836, 837, 838, 839, 840, 842, 842, 844, 845, 846, 846, 847, 848, 850, 854, 855, 857, 859, 859, 862, 864, 864, 865, 865, 865, 866, 866, 868, 871, 872, 873, 873, 874, 875, 877, 878, 879, 879, 881, 882, 883, 884, 884, 885, 885, 886, 887, 890, 890, 891, 891, 891, 893, 893, 895, 895, 895, 895, 897, 897, 899, 900, 901, 901, 903, 907, 907, 907, 908, 908, 909, 910, 911, 913, 914, 918, 918, 919, 919, 919, 920, 921, 923, 926, 928, 928, 928, 928, 930, 932, 934, 934, 934, 935, 936, 936, 937, 937, 939, 941, 942, 942, 942, 943, 946, 947, 948, 950, 950, 954, 956, 956, 956, 956, 957, 958, 958, 961, 961, 962, 963, 964, 964, 964, 964, 965, 967, 967, 967, 968, 968, 969, 970, 970, 972, 975, 977, 978, 978, 979, 981, 982, 983, 983, 983, 983, 985, 986, 987, 991, 993, 994, 994, 995, 996, 999, 999, 1000, 1000]
x = 900

# Function call
result = binary_search(arr, x)
print("Terdapat pada index: ",result)
 

start = timeit.default_timer() # catat waktu mulai
sum = 0
n = 1000000
for i in range(n+1):
  sum+=i;
stop = timeit.default_timer() # catat waktu selesai
lama_eksekusi = stop - start # lama eksekusi dalam satuan detik
print("Lama eksekusi: ",lama_eksekusi,"detik")

"""Pencarian pada array N"""

def binary_search(arr, x):
	low = 0
	high = len(arr) - 1
	mid = 0

	while low <= high:

		mid = (high + low) // 2

		# If x is greater, ignore left half
		if arr[mid] < x:
			low = mid + 1

		# If x is smaller, ignore right half
		elif arr[mid] > x:
			high = mid - 1

		# means x is present at mid
		else:
			return mid

	# If we reach here, then the element was not present
	return -1


# Test array
arr =[0, 1, 1, 1, 2, 3, 5, 5, 7, 7, 7, 8, 10, 10, 11, 12, 12, 12, 13, 15, 15, 16, 17, 17, 17, 20, 21, 21, 22, 22, 22, 24, 26, 27, 28, 28, 29, 30, 33, 35, 36, 37, 41, 42, 42, 43, 44, 44, 47, 49, 49, 49, 59, 59, 60, 61, 63, 64, 65, 67, 67, 68, 71, 71, 71, 73, 75, 75, 76, 77, 77, 77, 80, 80, 80, 81, 84, 85, 87, 87, 89, 89, 89, 90, 90, 92, 92, 93, 94, 94, 95, 96, 98, 98, 98, 98, 99, 99, 102, 102, 103, 104, 104, 105, 106, 106, 106, 106, 107, 110, 111, 114, 114, 115, 117, 118, 120, 121, 122, 125, 126, 126, 127, 127, 127, 128, 128, 129, 129, 129, 129, 130, 130, 131, 132, 132, 135, 137, 137, 140, 140, 143, 144, 144, 145, 145, 146, 150, 152, 156, 156, 158, 160, 161, 162, 162, 164, 164, 166, 166, 167, 167, 169, 170, 170, 171, 172, 173, 174, 175, 176, 177, 178, 178, 178, 181, 184, 184, 185, 185, 186, 186, 187, 188, 189, 189, 189, 190, 190, 190, 194, 194, 195, 195, 196, 196, 196, 199, 199, 201, 201, 202, 203, 205, 206, 207, 207, 208, 209, 211, 212, 217, 220, 221, 223, 223, 224, 225, 230, 230, 230, 232, 233, 233, 235, 235, 236, 239, 239, 240, 241, 242, 243, 244, 244, 245, 245, 248, 248, 248, 248, 248, 250, 250, 253, 256, 257, 258, 258, 259, 261, 263, 266, 267, 267, 271, 273, 276, 276, 277, 279, 280, 280, 281, 281, 282, 283, 284, 287, 288, 288, 288, 290, 291, 292, 292, 298, 301, 301, 306, 307, 310, 312, 312, 313, 314, 314, 316, 320, 322, 322, 324, 327, 329, 329, 329, 336, 338, 338, 349, 350, 351, 351, 353, 354, 355, 355, 357, 358, 361, 361, 364, 368, 368, 369, 369, 369, 370, 371, 376, 377, 377, 380, 381, 381, 382, 384, 386, 386, 390, 391, 391, 393, 394, 396, 398, 398, 400, 401, 401, 402, 403, 404, 404, 406, 407, 410, 410, 411, 411, 412, 413, 415, 415, 415, 417, 418, 419, 420, 422, 424, 425, 427, 428, 429, 430, 430, 432, 435, 437, 441, 442, 443, 443, 444, 444, 446, 446, 446, 449, 449, 450, 450, 451, 451, 454, 454, 459, 460, 460, 463, 467, 468, 469, 470, 470, 471, 472, 472, 475, 476, 477, 477, 478, 480, 480, 482, 483, 483, 484, 485, 487, 487, 487, 488, 491, 495, 495, 496, 497, 498, 499, 499, 503, 504, 509, 510, 511, 512, 513, 514, 514, 515, 515, 516, 516, 517, 518, 518, 519, 520, 521, 526, 527, 528, 528, 529, 530, 530, 531, 534, 534, 536, 538, 539, 543, 543, 544, 545, 545, 548, 549, 549, 552, 554, 554, 556, 556, 558, 560, 561, 565, 565, 566, 566, 571, 571, 572, 572, 572, 575, 575, 576, 578, 581, 582, 582, 586, 586, 588, 589, 589, 591, 591, 592, 595, 596, 597, 598, 599]
x = 588

# Function call
result = binary_search(arr, x)
print("Tedapat pada index: ",result)
 

start = timeit.default_timer() # catat waktu mulai
sum = 0
n = 1000000
for i in range(n+1):
  sum+=i;
stop = timeit.default_timer() # catat waktu selesai
lama_eksekusi = stop - start # lama eksekusi dalam satuan detik
print("Lama eksekusi: ",lama_eksekusi,"detik")